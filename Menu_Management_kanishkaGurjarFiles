3.1 AddItemScreen.js code;



import React, { useState } from 'react';
import { View, TextInput, Button, StyleSheet } from 'react-native';

const AddItemScreen = ({ navigation }) => {
  const [name, setName] = useState('');
  const [description, setDescription] = useState('');

  const handleAddItem = () => {
    // API call to add item
    // Assuming you have a function addMenuItem in your API utility file
    addMenuItem({ name, description, status: 'active' })
      .then(() => {
        navigation.goBack();
      })
      .catch(error => {
        console.error(error);
      });
  };

  return (
    <View style={styles.container}>
      <TextInput 
        style={styles.input}
        placeholder="Item Name"
        value={name}
        onChangeText={setName}
      />
      <TextInput 
        style={styles.input}
        placeholder="Description"
        value={description}
        onChangeText={setDescription}
      />
      <Button title="Add Item" onPress={handleAddItem} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    padding: 20,
  },
  input: {
    height: 40,
    borderColor: 'gray',
    borderWidth: 1,
    marginBottom: 12,
    paddingLeft: 8,
  },
});

export default AddItemScreen;



3.2 DELETE ITEMS 
Add a delete function and a confirmation dialog before deletion.


import React from 'react';
import { View, Text, Button, Alert, StyleSheet } from 'react-native';

const MenuItem = ({ item, onDelete, onToggleStatus }) => {

  const handleDelete = () => {
    Alert.alert(
      'Confirm Deletion',
      'Are you sure you want to delete this item?',
      [
        { text: 'Cancel', style: 'cancel' },
        { text: 'Delete', onPress: () => onDelete(item.id) },
      ]
    );
  };

  return (
    <View style={styles.item}>
      <Text>{item.name}</Text>
      <Text>{item.description}</Text>
      <View style={styles.buttons}>
        <Button title="Toggle Status" onPress={() => onToggleStatus(item.id)} />
        <Button title="Delete" onPress={handleDelete} />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  item: {
    padding: 20,
    borderBottomColor: '#ccc',
    borderBottomWidth: 1,
  },
  buttons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
});

export default MenuItem;




3.3 TOGGLE STATUS ; 
Add a toggle function to change the status of menu items.

MenuListScreen.js
import React, { useState, useEffect } from 'react';
import { View, FlatList, Button, StyleSheet } from 'react-native';
import MenuItem from './MenuItem';

const MenuListScreen = ({ navigation }) => {
  const [menuItems, setMenuItems] = useState([]);

  useEffect(() => {
    // Fetch menu items from the backend
    fetchMenuItems()
      .then(items => setMenuItems(items))
      .catch(error => console.error(error));
  }, []);

  const handleDeleteItem = (id) => {
    // API call to delete item
    deleteMenuItem(id)
      .then(() => {
        setMenuItems(menuItems.filter(item => item.id !== id));
      })
      .catch(error => console.error(error));
  };

  const handleToggleStatus = (id) => {
    // API call to toggle status
    toggleMenuItemStatus(id)
      .then(updatedItem => {
        setMenuItems(menuItems.map(item => item.id === id ? updatedItem : item));
      })
      .catch(error => console.error(error));
  };

  return (
    <View style={styles.container}>
      <FlatList 
        data={menuItems}
        renderItem={({ item }) => (
          <MenuItem 
            item={item} 
            onDelete={handleDeleteItem} 
            onToggleStatus={handleToggleStatus}
          />
        )}
        keyExtractor={item => item.id.toString()}
      />
      <Button title="Add Item" onPress={() => navigation.navigate('AddItem')} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
});

export default MenuListScreen;





4. API INTEGRATION ;
Set up a simple backend using JSON server or Firebase.

api.js




const API_URL = 'http://localhost:3000/menuItems'; // or your Firebase endpoint

export const fetchMenuItems = async () => {
  const response = await fetch(API_URL);
  return response.json();
};

export const addMenuItem = async (item) => {
  const response = await fetch(API_URL, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(item),
  });
  return response.json();
};

export const deleteMenuItem = async (id) => {
  await fetch(`${API_URL}/${id}`, { method: 'DELETE' });
};

export const toggleMenuItemStatus = async (id) => {
  const response = await fetch(`${API_URL}/${id}`);
  const item = await response.json();
  const updatedItem = { ...item, status: item.status === 'active' ? 'inactive' : 'active' };

  const updateResponse = await fetch(`${API_URL}/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(updatedItem),
  });
  return updateResponse.json();
};



5. Navigation Setup
App.js


import React from 'react';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import LoginScreen from './screens/LoginScreen';
import MenuListScreen from './screens/MenuListScreen';
import AddItemScreen from './screens/AddItemScreen';

const Stack = createStackNavigator();

const App = () => {
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Login">
        <Stack.Screen name="Login" component={LoginScreen} />
        <Stack.Screen name="MenuList" component={MenuListScreen} />
        <Stack.Screen name="AddItem" component={AddItemScreen} />
      </Stack.Navigator>
    </NavigationContainer>
  );
};

export default App;


